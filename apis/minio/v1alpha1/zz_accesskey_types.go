// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AccessKeyInitParameters struct {

	// The access key value. If omitted, MinIO generates one. Must be 8-20 characters when specified.
	// The access key. If provided, must be between 8 and 20 characters.
	AccessKeySecretRef *v1.SecretKeySelector `json:"accessKeySecretRef,omitempty" tf:"-"`

	// The policy to attach to the access key. Can be a policy name, a JSON document, or the contents of a file (e.g., file("path/to/policy.json")).
	// Policy to attach to the access key (policy name or JSON document).
	Policy *string `json:"policy,omitempty" tf:"policy,omitempty"`

	// The secret key value. If omitted, MinIO generates one. Must be at least 8 characters when specified.
	// The secret key. If provided, must be at least 8 characters.
	SecretKeySecretRef *v1.SecretKeySelector `json:"secretKeySecretRef,omitempty" tf:"-"`

	// The status of the access key (enabled or disabled). Defaults to enabled.
	// The status of the access key (enabled/disabled).
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// The MinIO user for whom the access key is managed.
	// The user for whom the access key is managed.
	// +crossplane:generate:reference:type=github.com/eaglesemanation/provider-minio/apis/iam/v1alpha1.User
	// +crossplane:generate:reference:refFieldName=UserRef
	// +crossplane:generate:reference:selectorFieldName=UserSelector
	User *string `json:"user,omitempty" tf:"user,omitempty"`

	// Reference to a User in iam to populate user.
	// +kubebuilder:validation:Optional
	UserRef *v1.Reference `json:"userRef,omitempty" tf:"-"`

	// Selector for a User in iam to populate user.
	// +kubebuilder:validation:Optional
	UserSelector *v1.Selector `json:"userSelector,omitempty" tf:"-"`
}

type AccessKeyObservation struct {

	// The access key ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The policy to attach to the access key. Can be a policy name, a JSON document, or the contents of a file (e.g., file("path/to/policy.json")).
	// Policy to attach to the access key (policy name or JSON document).
	Policy *string `json:"policy,omitempty" tf:"policy,omitempty"`

	// The status of the access key (enabled or disabled). Defaults to enabled.
	// The status of the access key (enabled/disabled).
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// The MinIO user for whom the access key is managed.
	// The user for whom the access key is managed.
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type AccessKeyParameters struct {

	// The access key value. If omitted, MinIO generates one. Must be 8-20 characters when specified.
	// The access key. If provided, must be between 8 and 20 characters.
	// +kubebuilder:validation:Optional
	AccessKeySecretRef *v1.SecretKeySelector `json:"accessKeySecretRef,omitempty" tf:"-"`

	// The policy to attach to the access key. Can be a policy name, a JSON document, or the contents of a file (e.g., file("path/to/policy.json")).
	// Policy to attach to the access key (policy name or JSON document).
	// +kubebuilder:validation:Optional
	Policy *string `json:"policy,omitempty" tf:"policy,omitempty"`

	// The secret key value. If omitted, MinIO generates one. Must be at least 8 characters when specified.
	// The secret key. If provided, must be at least 8 characters.
	// +kubebuilder:validation:Optional
	SecretKeySecretRef *v1.SecretKeySelector `json:"secretKeySecretRef,omitempty" tf:"-"`

	// The status of the access key (enabled or disabled). Defaults to enabled.
	// The status of the access key (enabled/disabled).
	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// The MinIO user for whom the access key is managed.
	// The user for whom the access key is managed.
	// +crossplane:generate:reference:type=github.com/eaglesemanation/provider-minio/apis/iam/v1alpha1.User
	// +crossplane:generate:reference:refFieldName=UserRef
	// +crossplane:generate:reference:selectorFieldName=UserSelector
	// +kubebuilder:validation:Optional
	User *string `json:"user,omitempty" tf:"user,omitempty"`

	// Reference to a User in iam to populate user.
	// +kubebuilder:validation:Optional
	UserRef *v1.Reference `json:"userRef,omitempty" tf:"-"`

	// Selector for a User in iam to populate user.
	// +kubebuilder:validation:Optional
	UserSelector *v1.Selector `json:"userSelector,omitempty" tf:"-"`
}

// AccessKeySpec defines the desired state of AccessKey
type AccessKeySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AccessKeyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AccessKeyInitParameters `json:"initProvider,omitempty"`
}

// AccessKeyStatus defines the observed state of AccessKey.
type AccessKeyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AccessKeyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// AccessKey is the Schema for the AccessKeys API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,minio}
type AccessKey struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AccessKeySpec   `json:"spec"`
	Status            AccessKeyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AccessKeyList contains a list of AccessKeys
type AccessKeyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AccessKey `json:"items"`
}

// Repository type metadata.
var (
	AccessKey_Kind             = "AccessKey"
	AccessKey_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AccessKey_Kind}.String()
	AccessKey_KindAPIVersion   = AccessKey_Kind + "." + CRDGroupVersion.String()
	AccessKey_GroupVersionKind = CRDGroupVersion.WithKind(AccessKey_Kind)
)

func init() {
	SchemeBuilder.Register(&AccessKey{}, &AccessKeyList{})
}
